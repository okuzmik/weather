{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","onChange","change","placeholder","Result","weather","err","city","date","sunrise","sunset","temp","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","ApiKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","sys","main","speed","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","it","shallow"],"mappings":"sXAkBeA,EAhBF,SAAAC,GAET,OACI,0BAAMC,SAAUD,EAAME,QAClB,2BACAC,KAAK,OACLC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,OAChBC,YAAY,mBAGZ,4BAAQJ,KAAK,UAAb,YCqBGK,EAhCA,SAAAR,GAAU,IAAD,EAE6CA,EAAMS,QAAhEC,EAFa,EAEbA,IAAKC,EAFQ,EAERA,KAAMC,EAFE,EAEFA,KAAMC,EAFJ,EAEIA,QAASC,EAFb,EAEaA,OAAQC,EAFrB,EAEqBA,KAAMC,EAF3B,EAE2BA,SAAUC,EAFrC,EAEqCA,KAErDC,EAAU,KAEd,IAAIR,GAAOC,EAAK,CACZ,IAAMQ,EAAc,IAAIC,KAAe,IAAVP,GAAgBQ,qBACvCC,EAAa,IAAIF,KAAc,IAATN,GAAeO,qBAE3CH,EACI,6BACI,mDAAwB,4BAAKP,IAC7B,sDAA4BC,GAC5B,oDAA0BG,EAA1B,UACA,6CAAmBI,GACnB,4CAAkBG,GAClB,mDAAyBL,EAAzB,QACA,iDAAuBD,EAAvB,SAKZ,OACI,yBAAKO,UAAU,qBACX,4BAAKb,EAAG,0BAAqBC,EAArB,iBACRO,KCtBNM,G,OAAS,oCAqFAC,E,2MAjFbC,MAAQ,CACNtB,MAAO,GACPQ,KAAM,GACND,KAAM,GACNE,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNP,KAAK,G,EAGPiB,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZzB,MAAOwB,EAAEE,OAAO1B,S,EAIpB2B,iBAAmB,SAAAH,GACjBA,EAAEI,iBACF,IAAMC,EAAG,4DAAwD,EAAKP,MAAMtB,MAAnE,kBAAkFoB,EAAlF,iBAETU,MAAMD,GACLE,KAAK,SAAAC,GACJ,GAAGA,EAASC,GAEV,OAAOD,EAET,MAAME,MAAM,8BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GAEJ,IAAMC,GAAO,IAAIrB,MAAOsB,iBAExB,EAAKb,SAAS,SAAAc,GAAS,MAAK,CAC1BjC,KAAK,EACLE,KAAM6B,EACN5B,QAAS2B,EAAKI,IAAI/B,QAClBC,OAAQ0B,EAAKI,IAAI9B,OACjBC,KAAMyB,EAAKK,KAAK9B,KAChBC,SAAUwB,EAAKK,KAAK7B,SACpBC,KAAMuB,EAAKvB,KAAK6B,MAChBnC,KAAM,EAAKe,MAAMtB,WAGpB2C,MAAM,SAAArC,GACLsC,QAAQC,IAAIvC,GAEZ,EAAKmB,SAAS,SAAAc,GAAS,MAAK,CACxBjC,KAAK,EACLC,KAAMgC,EAAUvC,Y,wEAMtB,OACE,yBAAKmB,UAAU,OACb,8BACE,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,oBACb,oKAKJ,iCACE,kBAAC,EAAD,CACEnB,MAAO8C,KAAKxB,MAAMtB,MAClBE,OAAQ4C,KAAKvB,kBACbzB,OAAQgD,KAAKnB,mBAEf,kBAAC,EAAD,CAAQtB,QAASyC,KAAKxB,e,GA3EhByB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,eCrHnBC,GAAG,2BAA4B,WAC3BC,kBAAQ,kBAAC,EAAD,W","file":"static/js/main.17b2e745.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props =>\r\n{\r\n    return (\r\n        <form onSubmit={props.submit}>\r\n            <input \r\n            type=\"text\" \r\n            value={props.value}\r\n            onChange={props.change}\r\n            placeholder=\"Enter the city\"\r\n\r\n            />\r\n            <button type=\"submit\">Search</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Result = props => {\r\n\r\n    const {err, city, date, sunrise, sunset, temp, pressure, wind} = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if(!err && city){\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n        content = (\r\n            <div>\r\n                <h3>Search Results for: <em>{city}</em></h3>\r\n                <h4>Data for day and time: {date}</h4>\r\n                <h4>Current temperature: {temp} &#176;C</h4>\r\n                <h4>Sunrise time: {sunriseTime}</h4>\r\n                <h4>Sunset time: {sunsetTime}</h4>\r\n                <h4>Current wind speed: {wind} m/s</h4>\r\n                <h4>current pressure: {pressure} hPa</h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className=\"result white-text\">\r\n            <h3>{err ? `We don't have \"${city}\" in the base` :\r\n            content}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Result;","import React, {Component} from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// @NECESSITY API KEY\nconst ApiKey = \"4020c5eedba8f7141c28769418b83a37\";\n\nclass App extends Component\n{\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })  \n  }\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `httpS://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${ApiKey}&units=metric`;\n    \n    fetch(API)\n    .then(response => {\n      if(response.ok)\n      {\n        return response\n      }\n      throw Error('Nie udało się!')\n    })\n    .then(response => response.json())\n    .then(data => {\n\n      const time = new Date().toLocaleString()\n\n      this.setState(prevState => ({\n        err: false,\n        date: time,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n        city: this.state.value,\n      }))\n    })\n    .catch(err => {\n      console.log(err)\n\n      this.setState(prevState => ({\n          err: true,\n          city: prevState.value,\n        }))\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <header className=\"App-header\">\n            <div className=\"header-container\">\n              <p>\n              This is the \"Family weather guide\" weather app! You can search from 200,000 cities! The maximum number of queries per minute is 60.\n              </p>\n            </div>\n          </header>\n          <section>\n            <Form \n              value={this.state.value} \n              change={this.handleInputChange}\n              submit={this.handleCitySubmit}\n              />\n            <Result weather={this.state}/>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { shallow } from 'enzyme';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nit('renders without crashing', () => {\n    shallow(<App />);\n  });"],"sourceRoot":""}